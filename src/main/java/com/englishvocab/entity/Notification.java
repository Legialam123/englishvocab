package com.englishvocab.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.hibernate.annotations.CreationTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "notification")
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@FieldDefaults(level = lombok.AccessLevel.PRIVATE)
public class Notification {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "notification_id")
    Integer notificationId;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    User user;
    
    @Column(nullable = false, length = 100)
    @NotBlank(message = "Ti√™u ƒë·ªÅ th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    @Size(max = 100, message = "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±")
    String title;
    
    @Column(nullable = false, length = 200)
    @NotBlank(message = "N·ªôi dung th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    @Size(max = 200, message = "N·ªôi dung kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 200 k√Ω t·ª±")
    String message;
    
    @Column(nullable = false, length = 50)
    @Enumerated(EnumType.STRING)
    @Builder.Default
    Type type = Type.INFO;
    
    @Column(nullable = false, length = 10)
    @Enumerated(EnumType.STRING)
    @Builder.Default
    Status status = Status.UNREAD;
    
    @CreationTimestamp
    @Column(name = "sent_at", updatable = false)
    LocalDateTime sentAt;
    
    public enum Type {
        INFO,           // Th√¥ng tin
        REMINDER,       // Nh·∫Øc nh·ªü
        ACHIEVEMENT,    // Th√†nh t·ª±u
        QUIZ_RESULT,    // K·∫øt qu·∫£ quiz
        SYSTEM         // H·ªá th·ªëng
    }
    
    public enum Status {
        READ, UNREAD
    }
    
    /**
     * Convenience methods
     */
    public boolean isRead() {
        return status == Status.READ;
    }
    
    public void markAsRead() {
        this.status = Status.READ;
    }
    
    public String getTypeDisplayName() {
        return switch (type) {
            case INFO -> "Th√¥ng tin";
            case REMINDER -> "Nh·∫Øc nh·ªü";
            case ACHIEVEMENT -> "Th√†nh t·ª±u";
            case QUIZ_RESULT -> "K·∫øt qu·∫£ quiz";
            case SYSTEM -> "H·ªá th·ªëng";
        };
    }
    
    public String getTypeIcon() {
        return switch (type) {
            case INFO -> "‚ÑπÔ∏è";
            case REMINDER -> "‚è∞";
            case ACHIEVEMENT -> "üèÜ";
            case QUIZ_RESULT -> "üìä";
            case SYSTEM -> "‚öôÔ∏è";
        };
    }
    
    public String getFormattedTime() {
        if (sentAt == null) return "N/A";
        
        LocalDateTime now = LocalDateTime.now();
        if (sentAt.isAfter(now.minusHours(1))) {
            return "V·ª´a xong";
        } else if (sentAt.isAfter(now.minusDays(1))) {
            long hours = java.time.Duration.between(sentAt, now).toHours();
            return hours + " gi·ªù tr∆∞·ªõc";
        } else {
            long days = java.time.Duration.between(sentAt, now).toDays();
            return days + " ng√†y tr∆∞·ªõc";
        }
    }
}
