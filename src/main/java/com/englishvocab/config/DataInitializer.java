package com.englishvocab.config;

import com.englishvocab.entity.User;
import com.englishvocab.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataInitializer implements CommandLineRunner {
    
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    
    @Override
    public void run(String... args) throws Exception {
        //initializeUsers();
    }

    /*
    private void initializeUsers() {
        log.info("B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o d·ªØ li·ªáu user m·∫´u...");
        
        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ data th√¨ kh√¥ng t·∫°o l·∫°i
        if (userRepository.count() > 0) {
            log.info("Database ƒë√£ c√≥ user, b·ªè qua vi·ªác kh·ªüi t·∫°o data m·∫´u.");
            return;
        }
        
        // 1. T·∫°o Admin User
        if (!userRepository.existsByUsername("admin")) {
            User adminUser = User.builder()
                    .username("admin")
                    .password(passwordEncoder.encode("admin123"))
                    .fullname("Qu·∫£n tr·ªã vi√™n")
                    .email("admin@englishvocab.com")
                    .role(User.Role.ADMIN)
                    .status(User.Status.ACTIVE)
                    .build();
            userRepository.save(adminUser);
            log.info("‚úÖ T·∫°o th√†nh c√¥ng Admin user: admin / admin123");
        }
        
        // 2. T·∫°o User th∆∞·ªùng th·ª© 2
        if (!userRepository.existsByUsername("teacher")) {
            User teacherUser = User.builder()
                    .username("teacher")
                    .password(passwordEncoder.encode("teacher123"))
                    .fullname("Gi√°o vi√™n Ti·∫øng Anh")
                    .email("teacher@englishvocab.com")
                    .role(User.Role.USER)
                    .status(User.Status.ACTIVE)
                    .build();
            userRepository.save(teacherUser);
            log.info("‚úÖ T·∫°o th√†nh c√¥ng Teacher user: teacher / teacher123");
        }
        
        // 3. T·∫°o Normal User
        if (!userRepository.existsByUsername("user")) {
            User normalUser = User.builder()
                    .username("user")
                    .password(passwordEncoder.encode("user123"))
                    .fullname("Ng∆∞·ªùi d√πng th∆∞·ªùng")
                    .email("user@englishvocab.com")
                    .role(User.Role.USER)
                    .status(User.Status.ACTIVE)
                    .build();
            userRepository.save(normalUser);
            log.info("‚úÖ T·∫°o th√†nh c√¥ng Normal user: user / user123");
        }
        
        // 4. T·∫°o th√™m user demo
        if (!userRepository.existsByUsername("demo")) {
            User demoUser = User.builder()
                    .username("demo")
                    .password(passwordEncoder.encode("demo123"))
                    .fullname("Nguy·ªÖn VƒÉn Demo")
                    .email("demo@example.com")
                    .role(User.Role.USER)
                    .status(User.Status.ACTIVE)
                    .build();
            userRepository.save(demoUser);
            log.info("‚úÖ T·∫°o th√†nh c√¥ng Demo user: demo / demo123");
        }
        
        // 5. T·∫°o user b·ªã kh√≥a ƒë·ªÉ test
        if (!userRepository.existsByUsername("locked")) {
            User lockedUser = User.builder()
                    .username("locked")
                    .password(passwordEncoder.encode("locked123"))
                    .fullname("User b·ªã kh√≥a")
                    .email("locked@example.com")
                    .role(User.Role.USER)
                    .status(User.Status.LOCKED)
                    .build();
            userRepository.save(lockedUser);
            log.info("‚úÖ T·∫°o th√†nh c√¥ng Locked user: locked / locked123 (kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p)");
        }
        
        long totalUsers = userRepository.count();
        log.info("üéâ Ho√†n th√†nh kh·ªüi t·∫°o d·ªØ li·ªáu! T·ªïng s·ªë user: {}", totalUsers);
    }
    */
}
